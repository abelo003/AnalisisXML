/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.cruz.mx.views;

import com.cruz.mx.beans.ArchivoInfo;
import com.cruz.mx.business.AbstractArchivosXML;
import java.awt.Point;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.nio.file.Path;
import java.nio.file.Paths;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import org.apache.log4j.Logger;
import org.apache.tools.ant.DirectoryScanner;

/**
 *
 * @author acruzb
 */
public class DialogArchivosCarpeta extends javax.swing.JDialog {

    private static final Logger LOGGER = Logger.getLogger(DialogArchivosCarpeta.class);
    private final AbstractArchivosXML modelArchivosXML;
    private Path pathCarpeta;
    private Principal principal;

    /**
     * Creates new form ArchivosContenidos
     * @param principal
     */
    public DialogArchivosCarpeta(java.awt.Frame parent, boolean modal, final Principal principal) {
        super(parent, modal);
        this.principal = principal;
        initComponents();
        modelArchivosXML = new AbstractArchivosXML();
        tablaArchivos.setModel(modelArchivosXML);
        tablaArchivos.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        init();
        tablaArchivos.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent me) {
                JTable table =(JTable) me.getSource();
                if (me.getClickCount() == 2) {
                    Point p = me.getPoint();
                    int row = table.rowAtPoint(p);
                    String archivo = modelArchivosXML.getValueAt(row, 2).toString();
                    LOGGER.info("Se procesa el archivo desde el dialogo: " + archivo);
                    principal.procesarArchivoXML(archivo);
                }
            }
        });
        
        tablaArchivos.addKeyListener(new KeyAdapter() {
                @Override
                public void keyReleased(KeyEvent e) {
                    int key = e.getKeyCode();
                    if (key == KeyEvent.VK_ENTER) {
                        int row;
                        if(tablaArchivos.getSelectedRow() == 0){
                            row = 0;
                        }
                        else{
                            row = tablaArchivos.getSelectedRow();
                        }
                        String archivo = modelArchivosXML.getValueAt(row, 2).toString();
                        LOGGER.info("Se procesa el archivo desde el dialogo: " + archivo);
                        principal.procesarArchivoXML(archivo);
                    }
                }
        });
    }
    
    public void setRutaCarpeta(Path pathCarpeta){
        this.pathCarpeta = pathCarpeta;
        escaneoArchivos();
    }
    
    public final void init(){
        setTitle("Archivos xml");
    }
    
    private void escaneoArchivos(){
        if(null != pathCarpeta){
            modelArchivosXML.emptyData();
            LOGGER.info("Se selecciona la carpeta: " + pathCarpeta.getFileName().toString());
            DirectoryScanner scanner = new DirectoryScanner();
            scanner.setIncludes(new String[]{"**/*" + Principal.XML_FORMAT});
            scanner.setBasedir(pathCarpeta.toFile());
            scanner.setCaseSensitive(false);
            scanner.scan();
            String[] files = scanner.getIncludedFiles();
            LOGGER.info("Se listan los archivos xml encontrados: " + files.length);
            for (String file : files) {
                modelArchivosXML.addData(new ArchivoInfo(Paths.get(file).getFileName().toString(), file, pathCarpeta.resolve(file).toString()));
            }
            modelArchivosXML.fireTableDataChanged();
            tablaArchivos.repaint();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablaArchivos = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btnProcesarTodo = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        tablaArchivos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tablaArchivos);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Lista de archivos contenidos en la carpeta");

        btnProcesarTodo.setText("Procesar todo");
        btnProcesarTodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcesarTodoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 680, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnProcesarTodo)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(btnProcesarTodo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnProcesarTodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcesarTodoActionPerformed
        JOptionPane.showMessageDialog(this, "Se inicia el procesamiento de todos los xml en la tabla.");
    }//GEN-LAST:event_btnProcesarTodoActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnProcesarTodo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaArchivos;
    // End of variables declaration//GEN-END:variables
}
